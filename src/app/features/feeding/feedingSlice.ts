import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState, AppThunk } from '../../store';
import { getFeedings } from './feedingAPI';

const initialState: InitialStateType<Feeding> = {
  items: [],
  isLoading: false,
  isLoaded: false,
  selectedFeatureId: '',
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const getFeedingsAsync = createAsyncThunk(
  'feeding/getFeedings',
  async () => {
    // TODO Remove this test code
    console.log('ELITEST getFeedingsAsync called');
    //^ TODO Remove this test code
    const response = await getFeedings();
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

export const feedingSlice = createSlice({
  name: 'feeding',
  initialState,
  reducers: {},
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(getFeedingsAsync.pending, (state) => {
        state.isLoading = true;
      })
      .addCase(getFeedingsAsync.fulfilled, (state, action) => {
        state.items = action.payload;
        state.isLoading = false;
        state.isLoaded = true;
      });
  },
});

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.feeding.value)`
export const selectFeatureItems = (state: RootState) => state.feeding.items;
export const selectFeatureIsLoading = (state: RootState) =>
  state.feeding.isLoading;
export const selectFeatureIsLoaded = (state: RootState) =>
  state.feeding.isLoaded;
export const selectSelectedFeatureId = (state: RootState) =>
  state.feeding.selectedFeatureId;
export const selectSelectedFeatureItem = (state: RootState) =>
  state.feeding.items.find(
    (item) => item._id === selectSelectedFeatureId(state)
  );

export default feedingSlice.reducer;
