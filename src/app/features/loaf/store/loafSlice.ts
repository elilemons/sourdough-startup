import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';

import { Labels } from '../../../../enums';
import { camelCase } from '../../../../utils';
import { RootState } from '../../../store';
import {
  createItem,
  deleteItem,
  getItems,
  updateItem,
} from '../../../utils/api';

const initialState: InitialStateType<Loaf> = {
  items: [],
  isLoading: false,
  isLoaded: false,
  selectedFeatureId: '',
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const getLoavesAsync = createAsyncThunk('loaf/getLoaves', async () => {
  // The value we return becomes the `fulfilled` action payload
  const response = await getItems<Loaf>({
    featureName: camelCase(Labels.LOAF),
  });
  // The value we return becomes the `fulfilled` action payload
  return response;
});

export const createLoafAsync = createAsyncThunk(
  'loaf/createLoaf',
  async (newItem: Loaf) => {
    // The value we return becomes the `fulfilled` action payload
    const response = await createItem<Loaf>({
      featureName: camelCase(Labels.LOAF),
      newItem,
    });
    // The value we return becomes the `fulfilled` action payload
    return response;
  }
);

export const updateLoafAsync = createAsyncThunk(
  'loaf/updateLoaf',
  async (updatedItem: Loaf) => {
    // The value we return becomes the `fulfilled` action payload
    const response = await updateItem<Loaf>({
      featureName: camelCase(Labels.LOAF),
      updatedItem,
    });
    // The value we return becomes the `fulfilled` action payload
    return response;
  }
);

export const deleteLoafAsync = createAsyncThunk(
  'loaf/deleteLoaf',
  async (id: string) => {
    // The value we return becomes the `fulfilled` action payload
    const response = await deleteItem({
      featureName: camelCase(Labels.LOAF),
      id,
    });
    // The value we return becomes the `fulfilled` action payload
    return response;
  }
);

export const loaveslice = createSlice({
  name: 'loaf',
  initialState,
  reducers: {
    setSelectedFeatureId: (state, action: PayloadAction<string>) => {
      state.selectedFeatureId = action.payload;
    },
    deleteFeature: (state, action: PayloadAction<string>) => {
      state.items = state.items.filter((item) => item.id !== action.payload);
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(getLoavesAsync.pending, (state) => {
        state.isLoading = true;
      })
      .addCase(getLoavesAsync.fulfilled, (state, action) => {
        state.items = action.payload;
        state.isLoading = false;
        state.isLoaded = true;
      })
      .addCase(getLoavesAsync.rejected, (state) => {
        state.isLoading = false;
        state.isLoaded = false;
      })
      .addCase(createLoafAsync.pending, (state) => {
        state.isLoading = true;
      })
      .addCase(createLoafAsync.fulfilled, (state, action) => {
        state.items = state.items.concat(action.payload);
        state.isLoading = false;
        state.isLoaded = true;
        state.selectedFeatureId = action?.payload[0].id || '';
      })
      .addCase(createLoafAsync.rejected, (state) => {
        state.isLoading = false;
        state.isLoaded = false;
      })
      .addCase(updateLoafAsync.pending, (state) => {
        state.isLoading = true;
      })
      .addCase(updateLoafAsync.fulfilled, (state, action) => {
        const updatedIds = action.payload.map((item) => item.id);

        state.items = [
          ...state.items
            .filter((item) => !updatedIds.includes(item.id))
            .concat(action.payload),
        ];
        state.isLoading = false;
        state.isLoaded = true;
      })
      .addCase(updateLoafAsync.rejected, (state) => {
        state.isLoading = false;
        state.isLoaded = false;
      })
      .addCase(deleteLoafAsync.pending, (state) => {
        state.isLoading = true;
      })
      .addCase(deleteLoafAsync.fulfilled, (state, action) => {
        // TODO Remove this test code
        console.log('ELITEST delete loaf async', {
          payload: action.payload,
        });
        //^ TODO Remove this test code
        state.items = [
          ...state.items.filter((item) => item.id !== action.payload.id),
        ];
        state.isLoading = false;
        state.isLoaded = true;

        if (state.selectedFeatureId === action.payload.id) {
          state.selectedFeatureId = '';
        }
      })
      .addCase(deleteLoafAsync.rejected, (state) => {
        state.isLoading = false;
        state.isLoaded = false;
      });
  },
});

export const { deleteFeature, setSelectedFeatureId } = loaveslice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.loaf.value)`
export const selectLoaves = (state: RootState) => state.loaf.items;
export const selectLoafIsLoading = (state: RootState) => state.loaf.isLoading;
export const selectLoafIsLoaded = (state: RootState) => state.loaf.isLoaded;
export const selectSelectedLoafId = (state: RootState) =>
  state.loaf.selectedFeatureId;
export const selectSelectedLoaf = (state: RootState) =>
  state.loaf.items.find((item) => item.id === selectSelectedLoafId(state));

export default loaveslice.reducer;
